/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AiUsageMetric } from "../../aiUsageMetric/base/AiUsageMetric";
import {
  ValidateNested,
  IsOptional,
  IsEnum,
  IsString,
  MaxLength,
  IsDate,
} from "class-validator";
import { Type } from "class-transformer";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";
import { EnumClientClientStatus } from "./EnumClientClientStatus";
import { Invoice } from "../../invoice/base/Invoice";
import { Lead } from "../../lead/base/Lead";
import { Password } from "../../password/base/Password";
import { Project } from "../../project/base/Project";
import { Service } from "../../service/base/Service";

@ObjectType()
class Client {
  @ApiProperty({
    required: false,
    type: () => [AiUsageMetric],
  })
  @ValidateNested()
  @Type(() => AiUsageMetric)
  @IsOptional()
  aiUsageMetrics?: Array<AiUsageMetric>;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  billingInfo!: JsonValue;

  @ApiProperty({
    required: false,
    enum: EnumClientClientStatus,
  })
  @IsEnum(EnumClientClientStatus)
  @IsOptional()
  @Field(() => EnumClientClientStatus, {
    nullable: true,
  })
  clientStatus?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  company!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  fullName!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [Invoice],
  })
  @ValidateNested()
  @Type(() => Invoice)
  @IsOptional()
  invoices?: Array<Invoice>;

  @ApiProperty({
    required: false,
    type: () => [Lead],
  })
  @ValidateNested()
  @Type(() => Lead)
  @IsOptional()
  leads?: Array<Lead>;

  @ApiProperty({
    required: false,
    type: () => [Password],
  })
  @ValidateNested()
  @Type(() => Password)
  @IsOptional()
  passwords?: Array<Password>;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  paymentMethods!: JsonValue;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phone!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  portalCredentials!: JsonValue;

  @ApiProperty({
    required: false,
    type: () => [Project],
  })
  @ValidateNested()
  @Type(() => Project)
  @IsOptional()
  projects?: Array<Project>;

  @ApiProperty({
    required: false,
    type: () => Service,
  })
  @ValidateNested()
  @Type(() => Service)
  @IsOptional()
  service?: Service | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Client as Client };
