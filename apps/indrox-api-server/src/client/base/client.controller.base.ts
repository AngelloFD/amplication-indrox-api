/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ClientService } from "../client.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ClientCreateInput } from "./ClientCreateInput";
import { Client } from "./Client";
import { ClientFindManyArgs } from "./ClientFindManyArgs";
import { ClientWhereUniqueInput } from "./ClientWhereUniqueInput";
import { ClientUpdateInput } from "./ClientUpdateInput";
import { AiUsageMetricFindManyArgs } from "../../aiUsageMetric/base/AiUsageMetricFindManyArgs";
import { AiUsageMetric } from "../../aiUsageMetric/base/AiUsageMetric";
import { AiUsageMetricWhereUniqueInput } from "../../aiUsageMetric/base/AiUsageMetricWhereUniqueInput";
import { InvoiceFindManyArgs } from "../../invoice/base/InvoiceFindManyArgs";
import { Invoice } from "../../invoice/base/Invoice";
import { InvoiceWhereUniqueInput } from "../../invoice/base/InvoiceWhereUniqueInput";
import { LeadFindManyArgs } from "../../lead/base/LeadFindManyArgs";
import { Lead } from "../../lead/base/Lead";
import { LeadWhereUniqueInput } from "../../lead/base/LeadWhereUniqueInput";
import { PasswordFindManyArgs } from "../../password/base/PasswordFindManyArgs";
import { Password } from "../../password/base/Password";
import { PasswordWhereUniqueInput } from "../../password/base/PasswordWhereUniqueInput";
import { ProjectFindManyArgs } from "../../project/base/ProjectFindManyArgs";
import { Project } from "../../project/base/Project";
import { ProjectWhereUniqueInput } from "../../project/base/ProjectWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ClientControllerBase {
  constructor(
    protected readonly service: ClientService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Client })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createClient(@common.Body() data: ClientCreateInput): Promise<Client> {
    return await this.service.createClient({
      data: {
        ...data,

        service: data.service
          ? {
              connect: data.service,
            }
          : undefined,
      },
      select: {
        billingInfo: true,
        clientStatus: true,
        company: true,
        createdAt: true,
        email: true,
        fullName: true,
        id: true,
        paymentMethods: true,
        phone: true,
        portalCredentials: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Client] })
  @ApiNestedQuery(ClientFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async clients(@common.Req() request: Request): Promise<Client[]> {
    const args = plainToClass(ClientFindManyArgs, request.query);
    return this.service.clients({
      ...args,
      select: {
        billingInfo: true,
        clientStatus: true,
        company: true,
        createdAt: true,
        email: true,
        fullName: true,
        id: true,
        paymentMethods: true,
        phone: true,
        portalCredentials: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Client })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async client(
    @common.Param() params: ClientWhereUniqueInput
  ): Promise<Client | null> {
    const result = await this.service.client({
      where: params,
      select: {
        billingInfo: true,
        clientStatus: true,
        company: true,
        createdAt: true,
        email: true,
        fullName: true,
        id: true,
        paymentMethods: true,
        phone: true,
        portalCredentials: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Client })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateClient(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() data: ClientUpdateInput
  ): Promise<Client | null> {
    try {
      return await this.service.updateClient({
        where: params,
        data: {
          ...data,

          service: data.service
            ? {
                connect: data.service,
              }
            : undefined,
        },
        select: {
          billingInfo: true,
          clientStatus: true,
          company: true,
          createdAt: true,
          email: true,
          fullName: true,
          id: true,
          paymentMethods: true,
          phone: true,
          portalCredentials: true,

          service: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Client })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteClient(
    @common.Param() params: ClientWhereUniqueInput
  ): Promise<Client | null> {
    try {
      return await this.service.deleteClient({
        where: params,
        select: {
          billingInfo: true,
          clientStatus: true,
          company: true,
          createdAt: true,
          email: true,
          fullName: true,
          id: true,
          paymentMethods: true,
          phone: true,
          portalCredentials: true,

          service: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/aiUsageMetrics")
  @ApiNestedQuery(AiUsageMetricFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AiUsageMetric",
    action: "read",
    possession: "any",
  })
  async findAiUsageMetrics(
    @common.Req() request: Request,
    @common.Param() params: ClientWhereUniqueInput
  ): Promise<AiUsageMetric[]> {
    const query = plainToClass(AiUsageMetricFindManyArgs, request.query);
    const results = await this.service.findAiUsageMetrics(params.id, {
      ...query,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        cost: true,
        createdAt: true,
        id: true,
        messageCount: true,

        service: {
          select: {
            id: true,
          },
        },

        serviceType: true,
        tokenConsumption: true,
        updatedAt: true,
        usageDate: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/aiUsageMetrics")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async connectAiUsageMetrics(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: AiUsageMetricWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aiUsageMetrics: {
        connect: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/aiUsageMetrics")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async updateAiUsageMetrics(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: AiUsageMetricWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aiUsageMetrics: {
        set: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/aiUsageMetrics")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async disconnectAiUsageMetrics(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: AiUsageMetricWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aiUsageMetrics: {
        disconnect: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/invoices")
  @ApiNestedQuery(InvoiceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Invoice",
    action: "read",
    possession: "any",
  })
  async findInvoices(
    @common.Req() request: Request,
    @common.Param() params: ClientWhereUniqueInput
  ): Promise<Invoice[]> {
    const query = plainToClass(InvoiceFindManyArgs, request.query);
    const results = await this.service.findInvoices(params.id, {
      ...query,
      select: {
        amount: true,
        attachments: true,

        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dueDate: true,
        generatedAt: true,
        id: true,
        invoiceType: true,
        paymentHistory: true,
        paymentStatus: true,
        paymentTerms: true,

        project: {
          select: {
            id: true,
          },
        },

        service: {
          select: {
            id: true,
          },
        },

        tax: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoices")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async connectInvoices(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoices: {
        connect: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoices")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async updateInvoices(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoices: {
        set: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoices")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async disconnectInvoices(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoices: {
        disconnect: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/leads")
  @ApiNestedQuery(LeadFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Lead",
    action: "read",
    possession: "any",
  })
  async findLeads(
    @common.Req() request: Request,
    @common.Param() params: ClientWhereUniqueInput
  ): Promise<Lead[]> {
    const query = plainToClass(LeadFindManyArgs, request.query);
    const results = await this.service.findLeads(params.id, {
      ...query,
      select: {
        assignedResponsible: true,

        client: {
          select: {
            id: true,
          },
        },

        company: true,
        createdAt: true,
        email: true,
        estimatedProjectValue: true,
        id: true,
        leadStatus: true,
        leadType: true,
        name: true,
        notes: true,
        phone: true,
        serviceOfInterest: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/leads")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async connectLeads(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: LeadWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leads: {
        connect: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/leads")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async updateLeads(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: LeadWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leads: {
        set: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/leads")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async disconnectLeads(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: LeadWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leads: {
        disconnect: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/passwords")
  @ApiNestedQuery(PasswordFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Password",
    action: "read",
    possession: "any",
  })
  async findPasswords(
    @common.Req() request: Request,
    @common.Param() params: ClientWhereUniqueInput
  ): Promise<Password[]> {
    const query = plainToClass(PasswordFindManyArgs, request.query);
    const results = await this.service.findPasswords(params.id, {
      ...query,
      select: {
        accessPermissions: true,

        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        credentials: true,
        expirationDate: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        usageAudit: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/passwords")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async connectPasswords(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: PasswordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      passwords: {
        connect: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/passwords")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async updatePasswords(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: PasswordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      passwords: {
        set: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/passwords")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async disconnectPasswords(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: PasswordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      passwords: {
        disconnect: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/projects")
  @ApiNestedQuery(ProjectFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  async findProjects(
    @common.Req() request: Request,
    @common.Param() params: ClientWhereUniqueInput
  ): Promise<Project[]> {
    const query = plainToClass(ProjectFindManyArgs, request.query);
    const results = await this.service.findProjects(params.id, {
      ...query,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,
        id: true,
        monthlyAmountDue: true,
        name: true,
        paymentSchedule: true,
        progress: true,

        service: {
          select: {
            id: true,
          },
        },

        startDate: true,
        status: true,
        totalPrice: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/projects")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async connectProjects(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        connect: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/projects")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async updateProjects(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        set: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/projects")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async disconnectProjects(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        disconnect: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }
}
