/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AiUsageMetric } from "./AiUsageMetric";
import { AiUsageMetricCountArgs } from "./AiUsageMetricCountArgs";
import { AiUsageMetricFindManyArgs } from "./AiUsageMetricFindManyArgs";
import { AiUsageMetricFindUniqueArgs } from "./AiUsageMetricFindUniqueArgs";
import { CreateAiUsageMetricArgs } from "./CreateAiUsageMetricArgs";
import { UpdateAiUsageMetricArgs } from "./UpdateAiUsageMetricArgs";
import { DeleteAiUsageMetricArgs } from "./DeleteAiUsageMetricArgs";
import { Client } from "../../client/base/Client";
import { Service } from "../../service/base/Service";
import { AiUsageMetricService } from "../aiUsageMetric.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AiUsageMetric)
export class AiUsageMetricResolverBase {
  constructor(
    protected readonly service: AiUsageMetricService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AiUsageMetric",
    action: "read",
    possession: "any",
  })
  async _aiUsageMetricsMeta(
    @graphql.Args() args: AiUsageMetricCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AiUsageMetric])
  @nestAccessControl.UseRoles({
    resource: "AiUsageMetric",
    action: "read",
    possession: "any",
  })
  async aiUsageMetrics(
    @graphql.Args() args: AiUsageMetricFindManyArgs
  ): Promise<AiUsageMetric[]> {
    return this.service.aiUsageMetrics(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AiUsageMetric, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AiUsageMetric",
    action: "read",
    possession: "own",
  })
  async aiUsageMetric(
    @graphql.Args() args: AiUsageMetricFindUniqueArgs
  ): Promise<AiUsageMetric | null> {
    const result = await this.service.aiUsageMetric(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AiUsageMetric)
  @nestAccessControl.UseRoles({
    resource: "AiUsageMetric",
    action: "create",
    possession: "any",
  })
  async createAiUsageMetric(
    @graphql.Args() args: CreateAiUsageMetricArgs
  ): Promise<AiUsageMetric> {
    return await this.service.createAiUsageMetric({
      ...args,
      data: {
        ...args.data,

        client: args.data.client
          ? {
              connect: args.data.client,
            }
          : undefined,

        service: args.data.service
          ? {
              connect: args.data.service,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AiUsageMetric)
  @nestAccessControl.UseRoles({
    resource: "AiUsageMetric",
    action: "update",
    possession: "any",
  })
  async updateAiUsageMetric(
    @graphql.Args() args: UpdateAiUsageMetricArgs
  ): Promise<AiUsageMetric | null> {
    try {
      return await this.service.updateAiUsageMetric({
        ...args,
        data: {
          ...args.data,

          client: args.data.client
            ? {
                connect: args.data.client,
              }
            : undefined,

          service: args.data.service
            ? {
                connect: args.data.service,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AiUsageMetric)
  @nestAccessControl.UseRoles({
    resource: "AiUsageMetric",
    action: "delete",
    possession: "any",
  })
  async deleteAiUsageMetric(
    @graphql.Args() args: DeleteAiUsageMetricArgs
  ): Promise<AiUsageMetric | null> {
    try {
      return await this.service.deleteAiUsageMetric(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Client, {
    nullable: true,
    name: "client",
  })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "read",
    possession: "any",
  })
  async getClient(
    @graphql.Parent() parent: AiUsageMetric
  ): Promise<Client | null> {
    const result = await this.service.getClient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Service, {
    nullable: true,
    name: "service",
  })
  @nestAccessControl.UseRoles({
    resource: "Service",
    action: "read",
    possession: "any",
  })
  async getService(
    @graphql.Parent() parent: AiUsageMetric
  ): Promise<Service | null> {
    const result = await this.service.getService(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
