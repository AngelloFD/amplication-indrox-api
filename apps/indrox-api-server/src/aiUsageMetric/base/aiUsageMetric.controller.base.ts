/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AiUsageMetricService } from "../aiUsageMetric.service";
import { AiUsageMetricCreateInput } from "./AiUsageMetricCreateInput";
import { AiUsageMetric } from "./AiUsageMetric";
import { AiUsageMetricFindManyArgs } from "./AiUsageMetricFindManyArgs";
import { AiUsageMetricWhereUniqueInput } from "./AiUsageMetricWhereUniqueInput";
import { AiUsageMetricUpdateInput } from "./AiUsageMetricUpdateInput";

export class AiUsageMetricControllerBase {
  constructor(protected readonly service: AiUsageMetricService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AiUsageMetric })
  async createAiUsageMetric(
    @common.Body() data: AiUsageMetricCreateInput
  ): Promise<AiUsageMetric> {
    return await this.service.createAiUsageMetric({
      data: {
        ...data,

        client: data.client
          ? {
              connect: data.client,
            }
          : undefined,

        service: data.service
          ? {
              connect: data.service,
            }
          : undefined,
      },
      select: {
        client: {
          select: {
            id: true,
          },
        },

        cost: true,
        createdAt: true,
        id: true,
        messageCount: true,

        service: {
          select: {
            id: true,
          },
        },

        serviceType: true,
        tokenConsumption: true,
        updatedAt: true,
        usageDate: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AiUsageMetric] })
  @ApiNestedQuery(AiUsageMetricFindManyArgs)
  async aiUsageMetrics(
    @common.Req() request: Request
  ): Promise<AiUsageMetric[]> {
    const args = plainToClass(AiUsageMetricFindManyArgs, request.query);
    return this.service.aiUsageMetrics({
      ...args,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        cost: true,
        createdAt: true,
        id: true,
        messageCount: true,

        service: {
          select: {
            id: true,
          },
        },

        serviceType: true,
        tokenConsumption: true,
        updatedAt: true,
        usageDate: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AiUsageMetric })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aiUsageMetric(
    @common.Param() params: AiUsageMetricWhereUniqueInput
  ): Promise<AiUsageMetric | null> {
    const result = await this.service.aiUsageMetric({
      where: params,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        cost: true,
        createdAt: true,
        id: true,
        messageCount: true,

        service: {
          select: {
            id: true,
          },
        },

        serviceType: true,
        tokenConsumption: true,
        updatedAt: true,
        usageDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AiUsageMetric })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAiUsageMetric(
    @common.Param() params: AiUsageMetricWhereUniqueInput,
    @common.Body() data: AiUsageMetricUpdateInput
  ): Promise<AiUsageMetric | null> {
    try {
      return await this.service.updateAiUsageMetric({
        where: params,
        data: {
          ...data,

          client: data.client
            ? {
                connect: data.client,
              }
            : undefined,

          service: data.service
            ? {
                connect: data.service,
              }
            : undefined,
        },
        select: {
          client: {
            select: {
              id: true,
            },
          },

          cost: true,
          createdAt: true,
          id: true,
          messageCount: true,

          service: {
            select: {
              id: true,
            },
          },

          serviceType: true,
          tokenConsumption: true,
          updatedAt: true,
          usageDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AiUsageMetric })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAiUsageMetric(
    @common.Param() params: AiUsageMetricWhereUniqueInput
  ): Promise<AiUsageMetric | null> {
    try {
      return await this.service.deleteAiUsageMetric({
        where: params,
        select: {
          client: {
            select: {
              id: true,
            },
          },

          cost: true,
          createdAt: true,
          id: true,
          messageCount: true,

          service: {
            select: {
              id: true,
            },
          },

          serviceType: true,
          tokenConsumption: true,
          updatedAt: true,
          usageDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
