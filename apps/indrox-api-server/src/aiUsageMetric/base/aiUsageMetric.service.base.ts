/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AiUsageMetric as PrismaAiUsageMetric,
  Client as PrismaClient,
  Service as PrismaService,
} from "@prisma/client";

export class AiUsageMetricServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AiUsageMetricCountArgs, "select">
  ): Promise<number> {
    return this.prisma.aiUsageMetric.count(args);
  }

  async aiUsageMetrics(
    args: Prisma.AiUsageMetricFindManyArgs
  ): Promise<PrismaAiUsageMetric[]> {
    return this.prisma.aiUsageMetric.findMany(args);
  }
  async aiUsageMetric(
    args: Prisma.AiUsageMetricFindUniqueArgs
  ): Promise<PrismaAiUsageMetric | null> {
    return this.prisma.aiUsageMetric.findUnique(args);
  }
  async createAiUsageMetric(
    args: Prisma.AiUsageMetricCreateArgs
  ): Promise<PrismaAiUsageMetric> {
    return this.prisma.aiUsageMetric.create(args);
  }
  async updateAiUsageMetric(
    args: Prisma.AiUsageMetricUpdateArgs
  ): Promise<PrismaAiUsageMetric> {
    return this.prisma.aiUsageMetric.update(args);
  }
  async deleteAiUsageMetric(
    args: Prisma.AiUsageMetricDeleteArgs
  ): Promise<PrismaAiUsageMetric> {
    return this.prisma.aiUsageMetric.delete(args);
  }

  async getClient(parentId: string): Promise<PrismaClient | null> {
    return this.prisma.aiUsageMetric
      .findUnique({
        where: { id: parentId },
      })
      .client();
  }

  async getService(parentId: string): Promise<PrismaService | null> {
    return this.prisma.aiUsageMetric
      .findUnique({
        where: { id: parentId },
      })
      .service();
  }
}
