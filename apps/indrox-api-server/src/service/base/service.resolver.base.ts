/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Service } from "./Service";
import { ServiceCountArgs } from "./ServiceCountArgs";
import { ServiceFindManyArgs } from "./ServiceFindManyArgs";
import { ServiceFindUniqueArgs } from "./ServiceFindUniqueArgs";
import { CreateServiceArgs } from "./CreateServiceArgs";
import { UpdateServiceArgs } from "./UpdateServiceArgs";
import { DeleteServiceArgs } from "./DeleteServiceArgs";
import { AiUsageMetricFindManyArgs } from "../../aiUsageMetric/base/AiUsageMetricFindManyArgs";
import { AiUsageMetric } from "../../aiUsageMetric/base/AiUsageMetric";
import { ClientFindManyArgs } from "../../client/base/ClientFindManyArgs";
import { Client } from "../../client/base/Client";
import { InvoiceFindManyArgs } from "../../invoice/base/InvoiceFindManyArgs";
import { Invoice } from "../../invoice/base/Invoice";
import { ProjectFindManyArgs } from "../../project/base/ProjectFindManyArgs";
import { Project } from "../../project/base/Project";
import { ServiceService } from "../service.service";
@graphql.Resolver(() => Service)
export class ServiceResolverBase {
  constructor(protected readonly service: ServiceService) {}

  async _servicesMeta(
    @graphql.Args() args: ServiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Service])
  async services(
    @graphql.Args() args: ServiceFindManyArgs
  ): Promise<Service[]> {
    return this.service.services(args);
  }

  @graphql.Query(() => Service, { nullable: true })
  async service(
    @graphql.Args() args: ServiceFindUniqueArgs
  ): Promise<Service | null> {
    const result = await this.service.service(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Service)
  async createService(
    @graphql.Args() args: CreateServiceArgs
  ): Promise<Service> {
    return await this.service.createService({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Service)
  async updateService(
    @graphql.Args() args: UpdateServiceArgs
  ): Promise<Service | null> {
    try {
      return await this.service.updateService({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Service)
  async deleteService(
    @graphql.Args() args: DeleteServiceArgs
  ): Promise<Service | null> {
    try {
      return await this.service.deleteService(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [AiUsageMetric], { name: "aiUsageMetrics" })
  async findAiUsageMetrics(
    @graphql.Parent() parent: Service,
    @graphql.Args() args: AiUsageMetricFindManyArgs
  ): Promise<AiUsageMetric[]> {
    const results = await this.service.findAiUsageMetrics(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Client], { name: "clients" })
  async findClients(
    @graphql.Parent() parent: Service,
    @graphql.Args() args: ClientFindManyArgs
  ): Promise<Client[]> {
    const results = await this.service.findClients(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Invoice], { name: "invoices" })
  async findInvoices(
    @graphql.Parent() parent: Service,
    @graphql.Args() args: InvoiceFindManyArgs
  ): Promise<Invoice[]> {
    const results = await this.service.findInvoices(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Project], { name: "projects" })
  async findProjects(
    @graphql.Parent() parent: Service,
    @graphql.Args() args: ProjectFindManyArgs
  ): Promise<Project[]> {
    const results = await this.service.findProjects(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
