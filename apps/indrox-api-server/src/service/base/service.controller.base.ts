/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceService } from "../service.service";
import { ServiceCreateInput } from "./ServiceCreateInput";
import { Service } from "./Service";
import { ServiceFindManyArgs } from "./ServiceFindManyArgs";
import { ServiceWhereUniqueInput } from "./ServiceWhereUniqueInput";
import { ServiceUpdateInput } from "./ServiceUpdateInput";
import { AiUsageMetricFindManyArgs } from "../../aiUsageMetric/base/AiUsageMetricFindManyArgs";
import { AiUsageMetric } from "../../aiUsageMetric/base/AiUsageMetric";
import { AiUsageMetricWhereUniqueInput } from "../../aiUsageMetric/base/AiUsageMetricWhereUniqueInput";
import { ClientFindManyArgs } from "../../client/base/ClientFindManyArgs";
import { Client } from "../../client/base/Client";
import { ClientWhereUniqueInput } from "../../client/base/ClientWhereUniqueInput";
import { InvoiceFindManyArgs } from "../../invoice/base/InvoiceFindManyArgs";
import { Invoice } from "../../invoice/base/Invoice";
import { InvoiceWhereUniqueInput } from "../../invoice/base/InvoiceWhereUniqueInput";
import { ProjectFindManyArgs } from "../../project/base/ProjectFindManyArgs";
import { Project } from "../../project/base/Project";
import { ProjectWhereUniqueInput } from "../../project/base/ProjectWhereUniqueInput";

export class ServiceControllerBase {
  constructor(protected readonly service: ServiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Service })
  async createService(
    @common.Body() data: ServiceCreateInput
  ): Promise<Service> {
    return await this.service.createService({
      data: data,
      select: {
        basePrice: true,
        category: true,
        createdAt: true,
        deliveryTimeline: true,
        description: true,
        duration: true,
        id: true,
        serviceName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Service] })
  @ApiNestedQuery(ServiceFindManyArgs)
  async services(@common.Req() request: Request): Promise<Service[]> {
    const args = plainToClass(ServiceFindManyArgs, request.query);
    return this.service.services({
      ...args,
      select: {
        basePrice: true,
        category: true,
        createdAt: true,
        deliveryTimeline: true,
        description: true,
        duration: true,
        id: true,
        serviceName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Service })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async service(
    @common.Param() params: ServiceWhereUniqueInput
  ): Promise<Service | null> {
    const result = await this.service.service({
      where: params,
      select: {
        basePrice: true,
        category: true,
        createdAt: true,
        deliveryTimeline: true,
        description: true,
        duration: true,
        id: true,
        serviceName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Service })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateService(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() data: ServiceUpdateInput
  ): Promise<Service | null> {
    try {
      return await this.service.updateService({
        where: params,
        data: data,
        select: {
          basePrice: true,
          category: true,
          createdAt: true,
          deliveryTimeline: true,
          description: true,
          duration: true,
          id: true,
          serviceName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Service })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteService(
    @common.Param() params: ServiceWhereUniqueInput
  ): Promise<Service | null> {
    try {
      return await this.service.deleteService({
        where: params,
        select: {
          basePrice: true,
          category: true,
          createdAt: true,
          deliveryTimeline: true,
          description: true,
          duration: true,
          id: true,
          serviceName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/aiUsageMetrics")
  @ApiNestedQuery(AiUsageMetricFindManyArgs)
  async findAiUsageMetrics(
    @common.Req() request: Request,
    @common.Param() params: ServiceWhereUniqueInput
  ): Promise<AiUsageMetric[]> {
    const query = plainToClass(AiUsageMetricFindManyArgs, request.query);
    const results = await this.service.findAiUsageMetrics(params.id, {
      ...query,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        cost: true,
        createdAt: true,
        id: true,
        messageCount: true,

        service: {
          select: {
            id: true,
          },
        },

        serviceType: true,
        tokenConsumption: true,
        updatedAt: true,
        usageDate: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/aiUsageMetrics")
  async connectAiUsageMetrics(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: AiUsageMetricWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aiUsageMetrics: {
        connect: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/aiUsageMetrics")
  async updateAiUsageMetrics(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: AiUsageMetricWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aiUsageMetrics: {
        set: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/aiUsageMetrics")
  async disconnectAiUsageMetrics(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: AiUsageMetricWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aiUsageMetrics: {
        disconnect: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/clients")
  @ApiNestedQuery(ClientFindManyArgs)
  async findClients(
    @common.Req() request: Request,
    @common.Param() params: ServiceWhereUniqueInput
  ): Promise<Client[]> {
    const query = plainToClass(ClientFindManyArgs, request.query);
    const results = await this.service.findClients(params.id, {
      ...query,
      select: {
        billingInfo: true,
        clientStatus: true,
        company: true,
        createdAt: true,
        email: true,
        fullName: true,
        id: true,
        paymentMethods: true,
        phone: true,
        portalCredentials: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/clients")
  async connectClients(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: ClientWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clients: {
        connect: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/clients")
  async updateClients(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: ClientWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clients: {
        set: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/clients")
  async disconnectClients(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: ClientWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clients: {
        disconnect: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/invoices")
  @ApiNestedQuery(InvoiceFindManyArgs)
  async findInvoices(
    @common.Req() request: Request,
    @common.Param() params: ServiceWhereUniqueInput
  ): Promise<Invoice[]> {
    const query = plainToClass(InvoiceFindManyArgs, request.query);
    const results = await this.service.findInvoices(params.id, {
      ...query,
      select: {
        amount: true,
        attachments: true,

        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dueDate: true,
        generatedAt: true,
        id: true,
        invoiceType: true,
        paymentHistory: true,
        paymentStatus: true,
        paymentTerms: true,

        project: {
          select: {
            id: true,
          },
        },

        service: {
          select: {
            id: true,
          },
        },

        tax: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoices")
  async connectInvoices(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoices: {
        connect: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoices")
  async updateInvoices(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoices: {
        set: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoices")
  async disconnectInvoices(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoices: {
        disconnect: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/projects")
  @ApiNestedQuery(ProjectFindManyArgs)
  async findProjects(
    @common.Req() request: Request,
    @common.Param() params: ServiceWhereUniqueInput
  ): Promise<Project[]> {
    const query = plainToClass(ProjectFindManyArgs, request.query);
    const results = await this.service.findProjects(params.id, {
      ...query,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,
        id: true,
        monthlyAmountDue: true,
        name: true,
        paymentSchedule: true,
        progress: true,

        service: {
          select: {
            id: true,
          },
        },

        startDate: true,
        status: true,
        totalPrice: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/projects")
  async connectProjects(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        connect: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/projects")
  async updateProjects(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        set: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/projects")
  async disconnectProjects(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        disconnect: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }
}
